{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _createReducer;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport { fetchFiltersSuccess, setCheckedFilter } from \"../actions/app-actions\";\nvar initialState = {\n  filters: [],\n  checkedFilters: []\n};\nexport var filterReducer = createReducer(initialState, (_createReducer = {}, _defineProperty(_createReducer, fetchFiltersSuccess, function (state, _ref) {\n  var payload = _ref.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    filters: payload.filters\n  });\n}), _defineProperty(_createReducer, setCheckedFilter, function (state, _ref2) {\n  var payload = _ref2.payload;\n  return _objectSpread(_objectSpread({}, state), {}, {\n    checkedFilters: _toConsumableArray(payload.filters)\n  });\n}), _createReducer));","map":{"version":3,"sources":["/Users/vladyslavbraiko/Desktop/handbook-of-cocktails-react-native/src/redux/reducers/fIlters-reducer.js"],"names":["createReducer","fetchFiltersSuccess","setCheckedFilter","initialState","filters","checkedFilters","filterReducer","state","payload"],"mappings":";;;;;;;;;AAAA,SAASA,aAAT,QAA8B,kBAA9B;AAEA,SAASC,mBAAT,EAA8BC,gBAA9B;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,cAAc,EAAE;AAFG,CAArB;AAKA,OAAO,IAAMC,aAAa,GAAGN,aAAa,CAACG,YAAD,wDACvCF,mBADuC,EACjB,UAACM,KAAD;AAAA,MAAUC,OAAV,QAAUA,OAAV;AAAA,yCAClBD,KADkB;AAErBH,IAAAA,OAAO,EAAEI,OAAO,CAACJ;AAFI;AAAA,CADiB,mCAKvCF,gBALuC,EAKpB,UAACK,KAAD;AAAA,MAAUC,OAAV,SAAUA,OAAV;AAAA,yCACfD,KADe;AAElBF,IAAAA,cAAc,qBAAMG,OAAO,CAACJ,OAAd;AAFI;AAAA,CALoB,mBAAnC","sourcesContent":["import { createReducer } from \"@reduxjs/toolkit\";\n\nimport { fetchFiltersSuccess, setCheckedFilter } from \"../actions/app-actions\";\n\nconst initialState = {\n  filters: [],\n  checkedFilters: [],\n};\n\nexport const filterReducer = createReducer(initialState, {\n  [fetchFiltersSuccess]: (state, { payload }) => ({\n    ...state,\n    filters: payload.filters,\n  }),\n  [setCheckedFilter]: (state, { payload }) => ({\n    ...state,\n    checkedFilters: [...payload.filters],\n  }),\n});\n"]},"metadata":{},"sourceType":"module"}