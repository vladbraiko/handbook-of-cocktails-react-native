{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { getFilteredDrinks, getFilters } from \"../../services/api\";\nimport { fetchDrinksRequest, fetchDrinksSuccess, fetchDrinksError, fetchFiltersRequest, fetchFiltersSuccess, fetchFiltersError, setSectionCount, setCheckedFilter, clearDrinks } from \"../actions/app-actions\";\nexport var fetchDrinks = function fetchDrinks() {\n  return function _callee(dispatch, getState) {\n    var _getState, drinks, filters, count, filter, _await$getFilteredDri, data;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch(fetchDrinksRequest());\n            _context.prev = 1;\n            _getState = getState(), drinks = _getState.drinks, filters = _getState.filters;\n            count = drinks.sectionCount;\n            filter = filters.checkedFilters[count];\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(getFilteredDrinks(filter));\n\n          case 7:\n            _await$getFilteredDri = _context.sent;\n            data = _await$getFilteredDri.data;\n            dispatch(fetchDrinksSuccess({\n              filter: filter,\n              data: data.drinks\n            }));\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](1);\n            dispatch(fetchDrinksError(_context.t0));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 12]], Promise);\n  };\n};\nexport var loadNextSection = function loadNextSection() {\n  return function _callee2(dispatch, getState) {\n    var _getState2, drinks, filters, count;\n\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _getState2 = getState(), drinks = _getState2.drinks, filters = _getState2.filters;\n            count = ++drinks.sectionCount;\n\n            if (!(count >= filters.checkedFilters.length)) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", true);\n\n          case 4:\n            dispatch(setSectionCount(count));\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(dispatch(fetchDrinks()));\n\n          case 7:\n            return _context2.abrupt(\"return\", false);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var setCheckedFilters = function setCheckedFilters(filters) {\n  return function (dispatch) {\n    dispatch(setCheckedFilter(filters));\n    dispatch(clearDrinks());\n    dispatch(fetchDrinks());\n  };\n};\nexport var fetchFilters = function fetchFilters() {\n  return function _callee3(dispatch) {\n    var _await$getFilters, data, filters;\n\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dispatch(fetchFiltersRequest());\n            _context3.prev = 1;\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(getFilters());\n\n          case 4:\n            _await$getFilters = _context3.sent;\n            data = _await$getFilters.data;\n            filters = data.drinks.map(function (item) {\n              return item.strCategory;\n            });\n            dispatch(fetchFiltersSuccess(filters));\n            dispatch(setCheckedFilter(filters));\n            _context3.next = 14;\n            break;\n\n          case 11:\n            _context3.prev = 11;\n            _context3.t0 = _context3[\"catch\"](1);\n            dispatch(fetchFiltersError());\n\n          case 14:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[1, 11]], Promise);\n  };\n};","map":{"version":3,"sources":["/Users/vladyslavbraiko/Desktop/handbook-of-cocktails-react-native/src/redux/operations/app-operations.js"],"names":["getFilteredDrinks","getFilters","fetchDrinksRequest","fetchDrinksSuccess","fetchDrinksError","fetchFiltersRequest","fetchFiltersSuccess","fetchFiltersError","setSectionCount","setCheckedFilter","clearDrinks","fetchDrinks","dispatch","getState","drinks","filters","count","sectionCount","filter","checkedFilters","data","loadNextSection","length","setCheckedFilters","fetchFilters","map","item","strCategory"],"mappings":"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","sourcesContent":["import { getFilteredDrinks, getFilters } from \"../../services/api\";\nimport {\n  fetchDrinksRequest,\n  fetchDrinksSuccess,\n  fetchDrinksError,\n  fetchFiltersRequest,\n  fetchFiltersSuccess,\n  fetchFiltersError,\n  setSectionCount,\n  setCheckedFilter,\n  clearDrinks,\n} from \"../actions/app-actions\";\n\nexport const fetchDrinks = () => async (dispatch, getState) => {\n  dispatch(fetchDrinksRequest());\n  try {\n    const { drinks, filters } = getState();\n    const count = drinks.sectionCount;\n    const filter = filters.checkedFilters[count];\n    const { data } = await getFilteredDrinks(filter);\n    dispatch(fetchDrinksSuccess({ filter, data: data.drinks }));\n  } catch (error) {\n    dispatch(fetchDrinksError(error));\n  }\n};\n\nexport const loadNextSection = () => async (dispatch, getState) => {\n  const { drinks, filters } = getState();\n  const count = ++drinks.sectionCount;\n  if (count >= filters.checkedFilters.length) return true;\n  dispatch(setSectionCount(count));\n  await dispatch(fetchDrinks());\n  return false;\n};\n\nexport const setCheckedFilters = (filters) => (dispatch) => {\n  dispatch(setCheckedFilter(filters));\n  dispatch(clearDrinks());\n  dispatch(fetchDrinks());\n};\n\nexport const fetchFilters = () => async (dispatch) => {\n  dispatch(fetchFiltersRequest());\n  try {\n    const { data } = await getFilters();\n    const filters = data.drinks.map((item) => item.strCategory);\n    dispatch(fetchFiltersSuccess(filters));\n    dispatch(setCheckedFilter(filters));\n  } catch (error) {\n    dispatch(fetchFiltersError());\n  }\n};\n"]},"metadata":{},"sourceType":"module"}