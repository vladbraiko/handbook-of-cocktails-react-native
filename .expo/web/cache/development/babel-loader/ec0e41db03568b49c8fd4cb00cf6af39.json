{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/vladyslavbraiko/Desktop/handbook-of-cocktails-react-native/src/components/Filters/FiltersList.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Filter from \"./Filter/Filter\";\nimport { styles } from \"./Filters.styles\";\nimport { setCheckedFilters } from \"../../redux/operations/app-operations\";\nimport { getFilters, getCheckedFilters } from \"../../redux/selectors/app-selectors\";\n\nvar FiltersList = function FiltersList(_ref) {\n  var filters = _ref.filters,\n      checkedFilters = _ref.checkedFilters,\n      setCheckedFilters = _ref.setCheckedFilters,\n      navigation = _ref.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      checked = _useState2[0],\n      setChecked = _useState2[1];\n\n  useEffect(function () {\n    setChecked(checkedFilters);\n  }, [checkedFilters]);\n\n  var applyHandler = function applyHandler() {\n    setCheckedFilters(checked);\n    navigation.goBack();\n  };\n\n  return React.createElement(View, {\n    style: styles.filters,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, React.createElement(ScrollView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, filters.map(function (filter) {\n    return React.createElement(Filter, {\n      key: filter,\n      filter: filter,\n      checked: checked,\n      setChecked: setChecked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    });\n  })), React.createElement(TouchableNativeFeedback, {\n    onPress: applyHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, \"APPLY\"))));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    filters: getFilters(state),\n    checkedFilters: getCheckedFilters(state)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setCheckedFilters: setCheckedFilters\n})(FiltersList);","map":{"version":3,"sources":["/Users/vladyslavbraiko/Desktop/handbook-of-cocktails-react-native/src/components/Filters/FiltersList.js"],"names":["React","useEffect","useState","connect","Filter","styles","setCheckedFilters","getFilters","getCheckedFilters","FiltersList","filters","checkedFilters","navigation","checked","setChecked","applyHandler","goBack","map","filter","button","buttonText","mapStateToProps","state"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;;;;;AAEA,OAAOC,MAAP;AACA,SAASC,MAAT;AACA,SAASC,iBAAT;AACA,SACEC,UADF,EAEEC,iBAFF;;AAKA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAKd;AAAA,MAJJC,OAII,QAJJA,OAII;AAAA,MAHJC,cAGI,QAHJA,cAGI;AAAA,MAFJL,iBAEI,QAFJA,iBAEI;AAAA,MADJM,UACI,QADJA,UACI;;AAAA,kBAC0BV,QAAQ,CAAC,EAAD,CADlC;AAAA;AAAA,MACGW,OADH;AAAA,MACYC,UADZ;;AAGJb,EAAAA,SAAS,CAAC,YAAM;AACda,IAAAA,UAAU,CAACH,cAAD,CAAV;AACD,GAFQ,EAEN,CAACA,cAAD,CAFM,CAAT;;AAIA,MAAMI,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBT,IAAAA,iBAAiB,CAACO,OAAD,CAAjB;AACAD,IAAAA,UAAU,CAACI,MAAX;AACD,GAHD;;AAKA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEX,MAAM,CAACK,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,OAAO,CAACO,GAAR,CAAY,UAACC,MAAD;AAAA,WACX,oBAAC,MAAD;AACE,MAAA,GAAG,EAAEA,MADP;AAEE,MAAA,MAAM,EAAEA,MAFV;AAGE,MAAA,OAAO,EAAEL,OAHX;AAIE,MAAA,UAAU,EAAEC,UAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADW;AAAA,GAAZ,CADH,CADF,EAWE,oBAAC,uBAAD;AAAyB,IAAA,OAAO,EAAEC,YAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEV,MAAM,CAACc,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEd,MAAM,CAACe,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CADF,CAXF,CADF;AAmBD,CApCD;;AAsCA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAY;AAClCZ,IAAAA,OAAO,EAAEH,UAAU,CAACe,KAAD,CADe;AAElCX,IAAAA,cAAc,EAAEH,iBAAiB,CAACc,KAAD;AAFC,GAAZ;AAAA,CAAxB;;AAKA,eAAenB,OAAO,CAACkB,eAAD,EAAkB;AAAEf,EAAAA,iBAAiB,EAAjBA;AAAF,CAAlB,CAAP,CAAgDG,WAAhD,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { ScrollView, Text, TouchableNativeFeedback, View } from \"react-native\";\nimport Filter from \"./Filter/Filter\";\nimport { styles } from \"./Filters.styles\";\nimport { setCheckedFilters } from \"../../redux/operations/app-operations\";\nimport {\n  getFilters,\n  getCheckedFilters,\n} from \"../../redux/selectors/app-selectors\";\n\nconst FiltersList = ({\n  filters,\n  checkedFilters,\n  setCheckedFilters,\n  navigation,\n}) => {\n  const [checked, setChecked] = useState([]);\n\n  useEffect(() => {\n    setChecked(checkedFilters);\n  }, [checkedFilters]);\n\n  const applyHandler = () => {\n    setCheckedFilters(checked);\n    navigation.goBack();\n  };\n\n  return (\n    <View style={styles.filters}>\n      <ScrollView>\n        {filters.map((filter) => (\n          <Filter\n            key={filter}\n            filter={filter}\n            checked={checked}\n            setChecked={setChecked}\n          />\n        ))}\n      </ScrollView>\n      <TouchableNativeFeedback onPress={applyHandler}>\n        <View style={styles.button}>\n          <Text style={styles.buttonText}>APPLY</Text>\n        </View>\n      </TouchableNativeFeedback>\n    </View>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  filters: getFilters(state),\n  checkedFilters: getCheckedFilters(state),\n});\n\nexport default connect(mapStateToProps, { setCheckedFilters })(FiltersList);\n"]},"metadata":{},"sourceType":"module"}